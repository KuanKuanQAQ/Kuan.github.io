<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Strong and Weak Symbols in C</title>
    <link href="/2023/06/12/Strong-and-Weak-Symbols-in-C/"/>
    <url>/2023/06/12/Strong-and-Weak-Symbols-in-C/</url>
    
    <content type="html"><![CDATA[<p>GNU C extends the standard C language. In GCC, for <strong>global symbols</strong>, there are strong symbols and weak symbols.</p><h2 id="1-The-Concept-of-Strong-and-Weak-Symbols"><a href="#1-The-Concept-of-Strong-and-Weak-Symbols" class="headerlink" title="1. The Concept of Strong and Weak Symbols"></a>1. The Concept of Strong and Weak Symbols</h2><p>By default, the compiler considers functions and initialized global variables as strong symbols, while uninitialized global variables are considered weak symbols. Strong symbols are strong because they have definite data; variables have values, and functions have bodies. Weak symbols, on the other hand, are weak because they have not been initialized and lack definite data.</p><p>The linker handles multiply defined strong and weak symbols according to the following rules:</p><ol><li>Strong symbols cannot be multiply defined; that is, there cannot be the same name for strong symbols in different object files. If there are multiple strong symbols, the linker will report a symbol redefinition error.</li><li>If a symbol is a strong symbol in one object file and a weak symbol in another, the strong symbol is chosen.</li><li>If a symbol is a weak symbol in all object files, the one with the largest size is chosen.</li></ol><p>In GCC, <code>__attribute__((weak))</code> can be used to forcibly define any symbol as a weak symbol. Suppose we have the following code: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> ext;<br><span class="hljs-type">int</span> weak1;<br><span class="hljs-type">int</span> strong = <span class="hljs-number">100</span>;<br>__attribute__((weak)) weak2 = <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>weak1</code> and <code>weak2</code> are weak symbols, <code>strong</code> and <code>main</code> are strong symbols, while <code>ext</code> is neither a strong symbol nor a weak symbol; it is an external variable.</p><h2 id="2-Strong-and-Weak-Symbols-across-Multiple-Files"><a href="#2-Strong-and-Weak-Symbols-across-Multiple-Files" class="headerlink" title="2. Strong and Weak Symbols across Multiple Files"></a>2. Strong and Weak Symbols across Multiple Files</h2><p>Here is an example of programming with multiple files:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* main.c */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br>__attribute__((weak)) <span class="hljs-type">int</span> a = <span class="hljs-number">20</span>; <span class="hljs-comment">/* weak symbol */</span><br>__attribute__((weak)) <span class="hljs-type">void</span> <span class="hljs-title function_">func</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">/* weak symbol */</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;heshui\n&quot;</span>);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">ext_func</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> ext; <span class="hljs-comment">/* extern symbol */</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d\n&quot;</span>, a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ext = %d\n&quot;</span>, ext);<br>    func();<br>    ext_func();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* module.c */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> a = <span class="hljs-number">9999</span>; <span class="hljs-comment">/* strong symbol */</span><br><span class="hljs-type">int</span> ext = <span class="hljs-number">11</span>; <span class="hljs-comment">/* strong symbol */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">func</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">/* strong symbol */</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;chifan\n&quot;</span>);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">ext_func</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">/* strong symbol */</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This is ext_func().\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>After compiling and running the above two files, the result is as follows:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">➜  ~ gcc <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.c</span> module<span class="hljs-selector-class">.c</span><br>➜  ~ ./<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.out</span><br><span class="hljs-selector-tag">a</span> = <span class="hljs-number">9999</span><br>ext = <span class="hljs-number">11</span><br>chifan<br>This is <span class="hljs-built_in">ext_func</span>().<br></code></pre></td></tr></table></figure><p>It can be seen that all symbols are found in the <code>main()</code> function, with the strong symbol a defined in <code>module.c</code> overriding the weak symbol in <code>main.c</code>.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/04/18/hello-world/"/>
    <url>/2023/04/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
